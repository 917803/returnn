# Reference: https://arxiv.org/abs/1804.09849

EmbDim = 1024 # embedding dimension
LstmDim = 1024
EncValueTotalDim = 2048
AttNumHeads = 4

# TODO:
# Add projection layer

def add_enc_layer(d, inp, output):
  d[output + '_inp_drop'] = {"class": "dropout", "from": ["inp"], "dropout": 0.3}

  d[output + '_lstm_fw'] = {"class": "rec", "unit": "nativelstm2",
                            "n_out": LstmDim, "direction": 1, "from": [output + '_inp_drop']}
  d[output + '_lstm_bw'] = {"class": "rec", "unit": "nativelstm2",
                            "n_out" : LstmDim, "direction": -1, "from": [output + '_inp_drop']}

  # concatenate
  d[output + '_inp_concat'] = {"class": "copy", "from": [output + '_lstm_fw', output + '_lstm_bw']}

  d[output + '_ff_drop'] = {"class": "dropout", "from": [output + '_input_concat'], "dropout": 0.3}

  # add
  d[output + '_ff_out'] = {"class": "combine", "kind": "add", "from": [output + '_inp_concat', output + '_ff_drop'],
                           "n_out": EncValueTotalDim}

  # projection layer
  d[output + '_proj_out'] = {"class": "length_projection", }

  d[output] = {"class": "copy", "from": [output + '_proj_out']}

def add_dec_layer(d, inp, output):
    d[output + '_inp_drop'] = {"class": "dropout", "from": ["inp"], "dropout": 0.3}

    d[output + '_lstm0_fw'] = {"class": "rec", "unit": "nativelstm2",
                              "n_out": LstmDim, "direction": 1, "from": [output + '_inp_drop']}

    # Multihead Attention

    d[output + '_attention'] = {"class": }

    # concat

    d[output + '_inp_concat'] = {"class": "copy", "from": [output + '_lstm0_fw', output + '_attention']}

    # unidirectional lstm

    d[output + '_lstm1_fw'] = {"class": "rec", "unit": "nativelstm2",
                              "n_out": LstmDim, "direction": 1, "from": [output + '_inp_drop']}

    # dropout

    d[output + '_ff_drop'] = {"class": "dropout", "from": [output + '_lstm1_fw'], "dropout": 0.3}

    # add

    d[output + '_ff_out'] = {"class": "combine", "kind": "add", "from": [output + '_inp_concat', output + '_ff_drop'],
                           "n_out": EncValueTotalDim/2}

    d[output] = {"class": "copy", "from": [output + '_ff_out']}

network = {
  "source_embed_raw": {"class": "linear", "activation": None, "with_bias": False, "n_out": EmbDim},
  "source_embed": {"class": "copy", "from": ["source_embed_raw"]},

  # add encoder layers later

  "encoder": {"class": "layer_norm", "from": ["enc_N"]},

  "output": {"class": "rec", "from": [], "unit": {
    'output': {'class': 'choice', 'target': 'classes', 'beam_size': 12, 'from': ["output_prob"]},
    "end": {"class": "compare", "from": ["output"], "value": 0},
    'target_embed_raw': {'class': 'linear', 'activation': None, "with_bias": False, 'from': ['output'],
                     "n_out": EmbDim, "initial_output": 0},
    "target_embed_weighted": {"class": "eval", "from": ["prev:target_embed_raw"], "eval": "source(0) * (%i**0.5)" % EncValueTotalDim},
    "target_embed": {"class": "dropout", "from": ["target_embed_weighted"], "dropout": 0.3},

    # add decoder layers later

    "decoder": {"class": "layer_norm", "from": ["dec_N"]},

    "output_prob": {
      "class": "softmax", "from": ["decoder"], "dropout": 0.0,
      "target": "classes", "loss": "ce", "loss_opts": {"label_smoothing": 0.1},
      "with_bias": False
    }

  }, "target": "classes", "max_seq_len": "max_len_from('base:encoder') * 3"},

  "decision": {
    "class": "decide", "from": ["output"], "loss": "edit_distance", "target": "classes",
    "loss_opts": {
        #"debug_print": True
    }
  }
}

# Add encoder layers

add_enc_layer(network, "source_embed", "enc_1")
add_enc_layer(network, "enc_1", "enc_2")
add_enc_layer(network, "enc_2", "enc_3")
add_enc_layer(network, "enc_3", "enc_4")
add_enc_layer(network, "enc_4", "enc_5")
add_enc_layer(network, "enc_5", "enc_N")

# Add decoder layers

add_dec_layer(network, "target_embed", "dec_1")
add_dec_layer(network, "dec_1", "dec_2")
add_dec_layer(network, "dec_2", "dec_3")
add_dec_layer(network, "dec_3", "dec_4")
add_dec_layer(network, "dec_4", "dec_5")
add_dec_layer(network, "dec_5", "dec_6")
add_dec_layer(network, "dec_6", "dec_7")
add_dec_layer(network, "dec_7", "dec_N")
